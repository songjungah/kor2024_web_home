[ Rest API 어노테이션 ]
    1. Rest Api : HTTP 통신을 통해 리소스의 생성[C], 읽기[R], 업데이트[U], 삭제[D]를 수행하는 아키텍처/구조
    2. 종류
        @Controller :
            1. Spring web MVC 중에서 Controller 역활의 클래스임을 표시
            2. 스프링 컨테이너(메모리/저장소)에 빈(인스턴스/객체) 등록할 수 있다.      * 싱글톤을 사용할 필요가 없어졌다.
            3. 모든 HTTP 요청이 매핑(연결)되는 클래스로 사용할 수 있다.

        @RestController :
            1. @Controller + @ResponseBody 조합된 어노테이션
            2. 주로 Rest API 컨트롤에서 사용
            3. 값(리소스) 반환하고 템플릿 반환시에는 사용하지 않는다.

        @GetMapping("URL정의") / @PostMapping("URL정의") / @PutMapping("URL정의") / @DeleteMapping("URL정의")
            1. HTTP GET method 의 요청을 자바 메소드와 매핑/연결 하는 어노테이션
            2. HTTP GET URL 를 정의할 수 있다.     @GetMapping("URL정의")
                -> 자바 메소드를 웹 통신으로부터 외부로 연결이 가능하다.
                -> ※ 주의할 점 : 프로젝트 내 동일한 URL 중복은 불가능하다. 단 HTTP METHOD 가 다를 경우는 가능하다.

        @ResponseBody
            1. HTTP 응답을 객체(Body) 또는 값으로 반환해주는 어노테이션
                -> Content-Type : 'application/json'
            2. 만일 생략하면 view(템플릿, html/jsp/타임리프/jsx 등등) 반환이 기본값으로 적용된다.
                -> Content-Type : 'html/text'

        @RequestMapping("URL정의")
            1. 메소드 또는 클래스 위에 주입이 가능하다.
            2. 주로 클래스 위에서 사용시 메소드 들의 공통 URL 정의할 때 사용한다.

        @RequestParam
            1. HTTP 요청할 때 쿼리스트링 방식으로 매개변수를 자바의 매개변수로 매핑하는 함수
            2. '쿼리스트링' 방식의 매개변수를 매핑하는 어노테이션
            3. 사용가능한 HTTP method : @GetMapping, @PostMapping, @PutMapping, @DeleteMapping

        @PostMapping
            1. HTTP 요청할 때 header Body 방식으로 데이터를 자바의 매개변수로 매핑하는 어노테이션
            2. 'HTTP Header Body' 방식의 데이터를 매핑하는 어노테이션
            3. 사용가능한 HTTP method : @PostMapping, @PutMapping

* Rest API 어노테이션 테스트는 talend api
* Spring 에서는 주로 Body 를 JSON/Dto/Map 로 취급한다.