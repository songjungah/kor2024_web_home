package day64.객체연관관계;

public class Main {

    // 회원객체 와 게시물 객체 와 댓글 객체 관계
    public static void main(String[] args) {

        // =========== 단방향 연관관계
        
        // 1. '강호동' 회원 가입 신청
        // 빌터패턴 인스턴스 생성
        회원 m1 = 회원.builder().회원번호(1).회원아이디("qwe").회원이름("강호동").build();

        // 생성자 인스턴스 생성
        // 회원 m2 = new 회원(1, "asd", "유재석");

        // 2. '강호동' 회원이 게시물 작성
        게시물 b1 = 게시물.builder().게시물번호(1).게시물제목("강호동쓴글").게시물내용("안녕").build();

        // * 회원(강호동)이 게시물을 작성하게 관계를 하기 위해서 두 객체는 어떻게 관계 표현?
        // 회원[상위PK] <---> 게시물[하위FK]
        b1.set게시물작성자FK(m1);         // 회원 객체를 게시물 객체에 대입한다.

        // 3. 1번 게시물의 작성자 확인, 게시물 객체 안으로 회원객체의 정보를 알 수 있다.
        System.out.println("1번 게시물 작성자 아이디 : " + b1.get게시물작성자FK().get회원아이디());
        System.out.println("1번 게시물 작성자 이름 : " + b1.get게시물작성자FK().get회원이름());

        // 4. 회원 객체의 게시물 확인, 게시물객체는 회원객체를 참조하지만 게시물은 참조하지 않는다.
        // System.out.println("강호동의 게시물 확인 : " + m1.??????);
        
        // ========== 양(서로 참조) 방향 연관관계, 데이터베이스 애서는 표현 불가능하다. ==========/
        
        // 5. 쌍방향 설정, 회원객체에 게시물 객체 대입
        m1.get작성한게시물().add(b1);     // m1(강호동) 객체에 b1(1번게시물) 객체를 대입한다.

        System.out.println(m1);
        // @ToString 사용하지 않았을때 : day64.객체연관관계.회원@3a71f4dd
        // @ToString , @ToString.Exclude :  회원(회원번호=1, 회원아이디=qwe, 회원이름=강호동)


    }

}
